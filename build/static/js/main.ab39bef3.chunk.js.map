{"version":3,"sources":["TTT/Board.jsx","TTT/Constants.jsx","TTT/TTT.jsx","App.js","serviceWorker.js","index.js"],"names":["Board","className","index","this","props","board","X","O","action","currentPlayer","playAction","boxes","forEach","tuple","push","onClick","e","handleBoxClicked","key","getInnerBox","React","Component","TTT","state","Array","fill","isGameFinished","playModelAction","setState","player","DIAG1","DIAG2","col","row","Math","floor","i","includes","diagIndex","length","response","alert","console","log","fetch","method","headers","body","JSON","stringify","inputs","then","status","json","printAPIError","catch","error","logits","map","val","Number","MIN_SAFE_INTEGER","indexOf","max","newBoard","checkGameEnded","nextPlayer","id","resetBoard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ab39bef3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Board.css\"\r\nimport * as Constants from \"./Constants\"\r\n\r\nclass Board extends React.Component {\r\n    X() {\r\n        return <div className=\"X\"/>\r\n    }\r\n\r\n    O() {\r\n        return <div className=\"O\"/>\r\n    }\r\n\r\n    getInnerBox(index) {\r\n        switch (this.props.board[index]){\r\n            case Constants.X:\r\n                return this.X();\r\n            case Constants.O:\r\n                return this.O();\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    handleBoxClicked(action) {\r\n        if (this.props.currentPlayer === Constants.O) {\r\n            this.props.playAction(action);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let boxes = []\r\n        const boxClassNameTuples = [\r\n            [\"box top left\", 6],\r\n            [\"box top\", 7],\r\n            [\"box top right\", 8],\r\n            [\"box left\", 3],\r\n            [\"box\", 4],\r\n            [\"box right\", 5],\r\n            [\"box bottom left\", 0],\r\n            [\"box bottom\", 1],\r\n            [\"box bottom right\", 2]\r\n        ]\r\n        boxClassNameTuples.forEach((tuple) => {\r\n            boxes.push(\r\n                <div className={tuple[0]} onClick={(e) => this.handleBoxClicked(tuple[1])} key={\"board-slot-\" + tuple[1]}>\r\n                    {this.getInnerBox(tuple[1])}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return(\r\n            <div className=\"game-board\">\r\n                {boxes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Board;","export const EMPTY = 0;\r\nexport const X = 1;\r\nexport const O = 2;\r\nexport const TTT_SERVING_URL = \"https://cors-anywhere.herokuapp.com/http://ec2-3-96-130-112.ca-central-1.compute.amazonaws.com:8501/v1/models/TTT:predict\";","import React from \"react\";\r\nimport \"./TTT.css\"\r\nimport * as Constants from \"./Constants\"\r\nimport Board from \"./Board\"\r\n\r\nclass TTT extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            board: Array(9).fill(Constants.EMPTY),\r\n            isGameFinished: false,\r\n            currentPlayer: Constants.X\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.playModelAction(this.state.board);\r\n    }\r\n\r\n    nextPlayer(currentPlayer) {\r\n        return currentPlayer === Constants.X ? Constants.O : Constants.X;\r\n    }\r\n\r\n    resetBoard(){\r\n        this.setState({\r\n            board: Array(9).fill(Constants.EMPTY),\r\n            isGameFinished: false,\r\n            currentPlayer: Constants.X\r\n        }, () => this.playModelAction(this.state.board));\r\n    }\r\n\r\n    checkGameEnded(board, action, player) {\r\n        const DIAG1 = [0,4,8];\r\n        const DIAG2 = [2,4,6];\r\n\r\n        let col = action % 3;\r\n        let row = Math.floor(action / 3);\r\n        //  Horizontal\r\n        for (let i = 0; i < 3; i++){\r\n            if (board[row * 3 + i] !== player){\r\n                break;\r\n            }\r\n            if (i === 2){\r\n                return true;\r\n            }\r\n        }\r\n        // Vertical\r\n        for (let i = 0; i < 3; i++){\r\n            if (board[col + 3 * i] !== player){\r\n                break;\r\n            }\r\n            if (i === 2){\r\n                return true;\r\n            }\r\n        }\r\n        // Diagonals\r\n        if (action % 2 === 0) {\r\n            if (DIAG1.includes(action)){\r\n                for (const diagIndex of DIAG1){\r\n                    if (board[diagIndex] !== player){\r\n                        break;\r\n                    }\r\n                    if (diagIndex === DIAG1[DIAG1.length - 1]){\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (DIAG2.includes(action)){\r\n                for (const diagIndex of DIAG2){\r\n                    if (board[diagIndex] !== player){\r\n                        break;\r\n                    }\r\n                    if (diagIndex === DIAG2[DIAG2.length - 1]){\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    printAPIError(response){\r\n        alert(\"Sorry, there was an error communicating with the model. Please try again later.\");\r\n        console.log(response);\r\n    }\r\n\r\n    async playModelAction(board) {\r\n        let response = await fetch(Constants.TTT_SERVING_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                inputs: [this.state.board]\r\n            })\r\n        }).then((response) => {\r\n            if (response.status !== 200) {\r\n                this.printAPIError(response);\r\n            } else {\r\n                return response.json();\r\n            }\r\n        }).catch((error) => this.printAPIError(error));\r\n\r\n        let logits = response[\"outputs\"][0];\r\n        logits = logits.map((val, index) => this.state.board[index] !== 0 ? Number.MIN_SAFE_INTEGER : val);\r\n        this.playAction(logits.indexOf(Math.max(...logits)));\r\n    }\r\n\r\n    playAction(action) {\r\n        if (this.state.isGameFinished || this.state.board[action] !== Constants.EMPTY) {\r\n            return\r\n        }\r\n        let player = this.state.currentPlayer;\r\n        let newBoard = this.state.board;\r\n        newBoard[action] = player;\r\n\r\n        this.setState( {\r\n            board: newBoard,\r\n            isGameFinished: this.checkGameEnded(newBoard, action, player),\r\n            currentPlayer: this.nextPlayer(player)\r\n        }, () => {\r\n            if (this.state.currentPlayer === Constants.X) {\r\n                this.playModelAction();\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let playAction = action => {this.playAction(action)}\r\n        return(\r\n            <div id=\"TTT\">\r\n                <h1 className=\"title\">Play Against The Trained RL Model</h1>\r\n                <Board board={this.state.board} playAction={playAction} currentPlayer={this.state.currentPlayer}/>\r\n                <button className=\"reset-button\" onClick={(e) => {this.resetBoard()}}>Reset Board</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TTT;","import React from 'react';\n\nimport TTT from \"./TTT/TTT\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TTT></TTT>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}